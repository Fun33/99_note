語言是什麼?脈落是什麼?
http://webftp.cogsh.tp.edu.tw/cti573/bcc2012/handout/unit4.htm

key word
OOP		Object-Oriented Language
程序性程式設計	Procedure Language

用思辨了解問題,得到答案
所以問對問題,真的好重要啊.
==============================思考的起點v1
所以如果要reuse,請用abstract or Inheritance.
如果功能是可能被加入或拿掉的,請把它做成一塊,加入和拿掉都很方便.
如果是細節是容易變動,請把它跟不會變動的部分分開,那日後就只需改細節部分.就不用擔心改了細節動到其它地方.
http://antrash.pixnet.net/blog/post/66024067
============================思考key word
所以如果要reuse,請用abstract or Inheritance.
如果功能是可能被加入或拿掉的,請把它做成一塊,加入和拿掉都很方便.
如果是細節是容易變動,請把它跟不會變動的部分分開,那日後就只需改細節部分.就不用擔心改了細節動到其它地方.


傳統的程式設計主張將程式看作一系列函式的集合，或者直接就是一系列對電腦下達的指令。


實做，多用、多想、再重複多看

OO的思考
物件導向程式設計中的每一個物件都應該能夠接受資料、處理資料並將資料傳達給其它物件，因此它們都可以被看作一個小型的「機器」，或者說是負有責任的角色。

善用合成、少用繼承

思考參考
http://antrash.pixnet.net/blog/post/69452213

換掉DB連線的方法
http://antrash.pixnet.net/blog/post/76362344-%E8%AB%96%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91part-7%EF%BC%9Ainterface

聚合的說明
http://antrash.pixnet.net/blog/post/80808873-%E8%AB%96%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91part-9%EF%BC%9A%E8%AA%8D%E8%AD%98is-a%E8%B7%9Fhas-a%E7%9A%84%E5%B7%AE%E7%95%B0%E6%80%A7
 

=================================


它說什麼runtime就發現的,聽嘸啊
http://antrash.pixnet.net/blog/post/84543968
==============================
訊息傳遞機制[2]
        Procedure Language以函數作為寫作和執行的主體。
函數由一群程式碼所組成,函數的開頭地址在Compile time或Link time就已經決定好了,
而在Runtime呼叫函數時給予適當的參數。函數和記憶體之間沒有關聯性,
而且函數A可以被任何其他函數呼叫,程式語言並沒有特別的規範。

Object-Oriented Language以Class作為寫作的主體,執行時主要由Object來紀錄程式狀態。
由於物件導向程式語言將Object Variable和Object Method一起定義在Class內,
再透過Encapsulation的機制規範存取Object Member的範圍,因此Object的Variable和Method就組成了一個完整的個體。
雖然Object Method寫起來就像Function,但執行Method內程式碼的機制和Function不同:
Object Method定義物件接受到訊息時的反應, 也就是說執行Method時有一個隱形的參數, 意即這個物件(this)
Function的實際地址在Compile或Link time就已經決定好了, 
但對OO來說, Object必須在Runtime接受到訊息後, 才能決定實際要執行的Method。
?是因為PL早就被new了嗎?而OO是在new時才被new.

OO中使系統能具備彈性跟動態擴充的利器：Polymorphism(多型)。
多型色是OO四大特色中對初學者而言較為抽象的概念，
簡單來說多型只是想延後function binding的時間，等到執行時期才決定要呼叫哪一個function。
如此，可使程式的執行不在於編譯時期決定，而延後到執行期間才動態決定呼叫何者。
例如：編譯時期只定義動物有一個walk() function，
而在執行期間若為獅子那就動態呼叫獅子此類別的walk() function；
反之若為人那就動態呼叫人此類別的walk() function。

現實世界中多型就是相同的稱呼方式以不同的形式存在著，試想一句想同的話以不同的音調呈現，就會變成不一樣的意思存在著。
舉例來說，光一個『哈！』有可能是乾笑、嘲笑、會心一笑…諸多的意思存在，這其實就是很好的多型概念，
一個相同的訊息在不同的時空環境跟語調配合下，就會產生出讓人感覺不一樣的意思存在，這不就是『同名異式』。
而『哈！』的實際意思總是要到實際發生的時間點視情況而定，才知道當下的意思，而當下不就是runtime的概念，
而runtime才決定意思，不就是dyanmic binding的概念∼∼
想通了嗎？...現實生活中本來就存在了多型的概念，而程式的語法設計上只是將實際存在的概念加以抽象化成語法形式來表現，其目的都是為了將真正的行為，用程式來加以反應。
>還是不懂,function不也是視人家丟什麼給他來決定嗎
>上一個還懂一點,它說要等到new的時侯才知道要讓誰叫呢.


============================v4-用程式的角度去看OO
Q : 什麼是OOP?Encapsulation/Inheritance/Polymorphism是什麼東西
Ans:
在了解OOP與OOP的特性,要先了解什麼是非OOP
非OOP,像是C,
C的寫法就是把一堆東西都寫在main的裡面,頂多就有function而已

它遇到什麼問題呢??
x因為function導向我們在思考問題時,如果東西一多,就比較無章法.>>它也不是無章法捏.它有一套分析系統的
O要拿掉某功能比較不容易
O要修改某功能,另一個功能容易受影響
所以就催生了OO
OO程式的好處		擴充/修改/reuse/分類
1.reuse	程序性設計的reuse,只能在function,沒法用在屬性.它的變數每個命名都需不同.
2.擴充	因為是用組件的概念做的,所以要加一個東西上去,拿一個東西掉,相對程序設計容易.
x3.分類	可以讓我們有清楚的脈落,去找到要edit的地方	>>如果用程序性設計的角度去看時,也是很容易找到的
x3.分類	比較不會改了A,也動到B.	>>暫時想不到例子
	x分class,改狗叫,不會改到貓叫.>>如果程序寫:狗叫()貓叫()也不會改到啊.
3.分類	我們可以從一個類別的名稱以及他的行為去理解與記憶它和系統之間的關係與責任，這樣的特性可以縮短日後我們重新檢視程式碼時所要花費的時間
4.封裝	O不會叫錯.PL:要叫點餐,叫成端水來.而OO,它把端水設成private,不能讓你叫.你就只有點餐public可以叫.	
x4.鬆綁	function也能鬆綁啊
OO的出現主要是要解決程式的易讀性、可維護性跟彈性等問題
『可再利用性』、『可維護性』跟『可擴充性』

OO的這些好處,全都歸於它的特性
Encapsulation/Inheritance/Polymorphism
天啊~誰這麼聰明想到這麼棒的方法
可以如何靈活的運用出好多種可能

OOP特性
Encapsulation/Inheritance/Polymorphism
OO的思考
物件導向程式設計中的每一個物件都應該能夠接受資料、處理資料並將資料傳達給其它物件，因此它們都可以被看作一個小型的「機器」，或者說是負有責任的角色。


Q:什麼時侯用OOP,什麼時侯用程序性程式設計
Ans:考量擴充或者變動的可能性
如果不會有擴充或者變動的可能性,就用程序性程式設計.
更詳細說明
物件導向既然擁有這麼抽象而複雜的特性，也就造成了它在撰寫上一開始就必須克服的時間成本。
為了能夠做到封裝，所以我們必須多花一些時間在分析物件的責任歸屬(分析這個function要寫在哪個class)
為了做到繼承，所以我們必須多花一些時間在分析物件之間共有的責任與資料(分析這些object有哪些是一樣的)
為了日後擴充方便，我們必須多花一些時間創造出合適的抽象介面來讓物件實做
這些都是伴隨著物件導向設計而來的工作。我們不能否認，使用結構式的程式設計不必付出這些時間成本；當然，自然也享受不到繼承與介面的優點。
持平而論，物件導向的出現是為了讓程式設計師能夠用更短的時間開發出更優良的軟體，
如果在某些現實條件下的評估結果是，不使用複雜的物件導向設計勝於使用的話，又為何不選擇簡單一點架構呢？
明明不會有擴充或者變動的可能性，硬要放個抽象介面在那邊礙眼，這是最不智的行為。
吃路邊攤的時候穿晚禮服，就算你長的再美，也只會讓人家覺得你有毛病而已，不是嗎？

============================v4-用思考的角度去看OO

OO主要就是希望更貼近真實世界，用更自然的方法描繪出程式的邏輯運作。


如果我們用OO的方式去思考問題時,就沒法實作.所以就有了OOP來實作OO.
Q:那為什麼要用OO的方法思考?不用其它方法思考呢?
我們可以從一個類別的名稱以及他的行為去理解與記憶它和系統之間的關係與責任，
這樣的特性可以縮短日後我們重新檢視程式碼時所要花費的時間
OO對思考的好處
1.跟客戶說明時,比較容易	其實程序性程式設計也有圖可以進行說明.
2.跟RD確認規格時,比較容易	其實程序性程式設計也有圖可以進行說明.


所以我們就希望將問題拆解,用物件的方式去思考,去看這個問題
但當時程式,並沒有這樣的概念,沒法用程式來實作,所以就發明了OOP
於是我們就多了一種可以實作另一種思維解決問題的方法.
現在這樣的規範,我們能寫非OOP,也能寫OOP.
===========================================think



-程式本來這樣寫,沒有這樣的寫法,我們把它加上去.
-它是一個idea,就像當時只能寫0101,有個人有個idea,想用英文來寫,就有了程式語言.
而現在它也是一個idea,想用這樣的方法來寫,就有了OOP.
 
=========================head
下午 12:23 2015/4/2
寫程式寫這麼久,終於知道什麼是物件導向了
原來我們學的C 它不是物件導向
它的寫法就是把一堆東西都寫在main的裡面,頂多就有function而已
而之前這樣寫,有些人覺得不夠好用,就製造了另一種寫的方式,就是物件導向.
而物件導向這樣概念發展出來的寫法,就不是把所有東西都放在main裡而且,它有了分類的概念.像是如果要算1+2.

非物件導向的語言有
http://webftp.cogsh.tp.edu.tw/cti573/bcc2012/handout/unit4.htm 
============================v3
在非物件導向語言,他就是全部的東西,都放在一起
功能-加(var v1,var v2)
功能-打怪()
功能-鬧鐘提醒()

在物件導向語言,
他就可以把功能-加放到算法的分類裡.
把功能-打怪放在game的分類裡
把功能-鬧鐘提醒()放在clock的分類裡
不用全部的東西都放在一起

==========================v2
在非物件導向語言,他就是
加(var v1,var v2)
打怪()
main
{
加(1,2);
}
在物件導向語言,
他就可以把加放到算法的分類裡.
把打怪放在game的分類裡,不用全部的東西都寫在一起.

======================v1
在非物件導向語言,他就是
加(var v1,var v2){}
打怪(){}
main
{
加(1,2);
}
但在物件導向語言,他就可以
main
{
new 算法().加(1,2);
new game().打怪();
}
class 算法
{
加(var v1,var v2){} 
}
class game
{
打怪();
}

===========================發想過程

class是抽象的,定義狗的屬性,行為.class dog{}
class SRC_MI{}
object 是實體,Happy就是object,然後Happy(objcect)是狗(class)	Dog Happy = new Dog();

OOP3個特性
Encapsulation	你不知call怎麼做到你要的東西.只管拿就好了.所以有問題,改call裡面就好

private function hide{}
private function call{hide();}

Inheritance	擴充/修改/reuse/data降低
Polymorphism	由繼承而產生的相關的不同的類別

Inheritance	擴充/修改/reuse/data降低
吉娃娃是狗的一種	xx table 是SRC_MI的一種.
class 吉娃娃:Dog{}	class xx:SRC_MI{ }
==============================
C沒有private public 嗎
C不能繼承嗎
C沒有class嗎,如果有class應該能多型啊	>>C果然沒有class
C有struct可寫在main之外.
http://webftp.cogsh.tp.edu.tw/cti573/bcc2012/handout/unit4.htm
想一下本來是0 101,本來就是一串資料.
所以一開始程式也是一串資料,要編成0101.
後來又弄個OOP,然後再編成0101
天啊~~原來如此.果然要思考才會懂啊.
它到底在說什麼,然後去想難道本來沒有嗎.真的沒有,所以才會這樣叫做OOP啊.
一個OOP就有一個非OOP啊.
先有非OOP才有OOP啊.
所以OOP只是一個和原本不一樣的東西
然後Encapsulation/Inheritance/Polymorphism是它和非OOP的差別啊.
就是這樣而已啊

本來是
function xxx();
main
{
	xxx();
}
ref http://programming.im.ncnu.edu.tw/C_index.html

現在呢?可以原來那樣.也可以
main
{
new cxxx().fxxx();
}
class cxxx()
{
function fxxx(){}
}
=========================泛型
如果現在我用的是int,complier就會把T弄成int,如果現在我用的是double,complier就會把T弄成double,這樣min就只需寫一個,不用寫2個了.
要小心使用,不然C#就失去與VB最大的差別.

宣告
template <typename T>
T min (T x, T y)
{
return (x < y)? x : y
}
如果現在我用的是int,complier就會把T弄成int
int m, x, y;
m = min(x, y);
如果現在我用的是double,complier就會把T弄成double
double m, x, y;
m = min(x, y);
這樣min就只需寫一個,不用寫2個了.

http://antrash.pixnet.net/blog/post/84543968
=======================encry
封裝最主要的兩個優勢：
1.避免不必要的資料存取現象發生。利用封裝可以適度的將資料進行適度資訊隱藏。如此避免不必要的存取，進而發生問題。
2.適度將製作細節封裝可以降低ripple effect(漣波效益)，避免日後修改一問題所帶來的連帶效應過大。如此在日後可增加系統的可擴充性、易維護性。對維修工程師將是一大福音喔∼
        private 身高；

        public boolean set身高(int h) {

          if(h<0) return false;

          else 身高 = h;

        }
ref
http://antrash.pixnet.net/blog/post/66986031
=======================ref
http://www.dotblogs.com.tw/jameswu/archive/2008/06/26/4386.aspx
https://sites.google.com/a/mis.nsysu.edu.tw/cheng-shi-zi-xun-wang/java-jin-jie-pian/wu-jian-dao-xiang/1-shen-me-shi-wu-jian-dao-xiang
http://antrash.pixnet.net/blog/post/65311153-%E8%AB%96%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91part-1%EF%BC%9Awhy-oo
